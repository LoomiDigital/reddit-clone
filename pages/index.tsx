import type { NextPage } from "next";
import Head from "next/head";
import useInfiniteScroll from "react-infinite-scroll-hook";
import { useGetPostsQuery } from "@d20/generated/graphql";

import PostBox from "@d20/Components/Postbox";
import Feed from "@d20/Components/Feed";

const Home: NextPage = () => {
  const { data, fetchMore, loading } = useGetPostsQuery({
    variables: {
      first: 10,
    },
    fetchPolicy: "cache-and-network",
  });

  const posts = data?.posts?.edges;
  const hasNextPage: boolean = data?.posts?.pageInfo?.hasNextPage!;

  const handleLoadMore = () => {
    hasNextPage &&
      fetchMore({
        variables: {
          first: 10,
          after: data?.posts?.pageInfo.endCursor,
        },
        updateQuery(
          prevResult,
          { fetchMoreResult }
        ): ReturnType<typeof Object> {
          const newEdges = fetchMoreResult?.posts?.edges;
          const oldEdges = prevResult?.posts?.edges;
          const pageInfo = fetchMoreResult?.posts?.pageInfo;

          const oldIds = new Set(oldEdges?.map((edge) => edge?.node?.id));
          const filteredEdges = newEdges?.filter(
            (edge) => !oldIds.has(edge?.node?.id)
          );

          return newEdges?.length
            ? {
                __typename: prevResult?.__typename,
                posts: {
                  __typename: prevResult?.posts?.__typename,
                  edges: [...oldEdges!, ...filteredEdges!],
                  pageInfo,
                },
              }
            : prevResult;
        },
      });
  };

  const [sentryRef] = useInfiniteScroll({
    hasNextPage,
    loading,
    onLoadMore: handleLoadMore,
  });

  return (
    <div className="mx-auto my-7 max-w-5xl">
      <Head>
        <title>Reddit 2.0</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PostBox />
      <Feed
        posts={posts}
        loading={loading || hasNextPage}
        loadingRef={sentryRef}
      />
    </div>
  );
};

export default Home;
