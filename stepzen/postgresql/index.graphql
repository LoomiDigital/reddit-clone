type comment {
  username: String
  text: String
  post_id: ID
  id: ID!
  created_at: DateTime
}

type post {
  username: String
  title: String
  subreddit_id: ID
  image: String
  id: ID!
  created_at: DateTime
  body: String
  subreddit: [subreddit]
    @materializer(
      query: "getSubredditListById"
      arguments: [{ name: "id", field: "subreddit_id" }]
    )
  votes: [vote]
    @materializer(
      query: "getVoteByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  comments: [comment]
    @materializer(
      query: "getCommentByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
}

type subreddit {
  topic: String
  id: ID!
  created_at: DateTime
}

type user {
  username: String
  surname: String
  id: ID!
  firstname: String
  created_at: DateTime
}

type vote {
  username: String
  upvote: Boolean
  post_id: ID
  id: ID!
  created_at: DateTime
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'comment' "
  getCommentList: [comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )

  getCommentByPostId(post_id: ID!): [comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "comment" WHERE "post_id" = $1
      """
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )

  commentPaginatedList(first: Int, after: Int): [comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'post' "
  getPostsByTopic(topic: String!): [post]
    @dbquery(
      type: "postgresql"
      query: """
      select *, "post"."id" as "id" from "post"
      join "subreddit" on "subreddit"."id" = "post"."subreddit_id"
      where "subreddit"."topic" = $1
      """
      schema: "public"
      configuration: "postgresql_config"
    )

  getPostList: [post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "post"
      order by "created_at" desc
      """
      schema: "public"
      configuration: "postgresql_config"
    )
  postPaginatedList(first: Int, after: Int): [post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "title", "username" FROM "post" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'subreddit' "
  getSubredditList: [subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )

  getSubredditListById(id: ID!): [subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "subreddit" WHERE "id" = $1
      """
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )

  getSubredditByTopic(topic: String!): [subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "subreddit" WHERE "topic" = $1
      """
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )

  subredditPaginatedList(first: Int, after: Int): [subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'user' "
  userList: [user]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      configuration: "postgresql_config"
    )
  userPaginatedList(first: Int, after: Int): [user]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "firstname", "id", "surname", "username" FROM "user" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'vote' "
  getVoteByPostId(post_id: ID!): [vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "vote" WHERE "id" = $1
      order by "created_at" desc
      """
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )

  voteByPost_idAndUsername(post_id: ID!, username: String!): [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  voteList: [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  votePaginatedList(first: Int, after: Int): [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'comment' "
  deleteComment(
    username: String!
    post_id: ID!
    text: String!
    id: ID!
    created_at: DateTime!
  ): comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    username: String
    post_id: ID
    text: String
    created_at: DateTime
  ): comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'post' "
  deletePost(
    body: String!
    subreddit_id: ID!
    id: ID!
    created_at: DateTime!
    title: String!
    username: String!
    image: String!
  ): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String!
    subreddit_id: ID!
    title: String!
    username: String!
    image: String!
  ): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'subreddit' "
  deleteSubreddit(topic: String!, created_at: DateTime!, id: ID!): subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreddit(topic: String!): subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'user' "
  deleteUser(
    username: String!
    firstname: String!
    surname: String!
    id: ID!
    created_at: DateTime!
  ): user
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertUser(
    username: String
    firstname: String
    surname: String
    created_at: DateTime
  ): user
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'vote' "
  deleteVote(
    username: String!
    post_id: ID!
    id: ID!
    created_at: DateTime!
    upvote: Boolean!
  ): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    username: String
    post_id: ID
    created_at: DateTime
    upvote: Boolean
  ): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
}
