type Comment {
  username: String!
  text: String!
  post_id: ID
  id: ID
  created_at: DateTime
}

type Subreddit {
  topic: String!
  id: ID!
  created_at: DateTime
}

type Vote {
  username: String!
  upvote: Boolean!
  post_id: ID!
  id: ID
  created_at: DateTime
}

type Post {
  id: ID!
  title: String!
  body: String
  votes: [Vote]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  subreddit_topic: String!
  subreddit_id: ID!
  image: String
  created_at: DateTime
  username: String!
}

type PostEdge {
  cursor: String
  node: Post
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'comment' "
  comment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentsByPostId(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" WHERE "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  commentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'post' "
  posts(first: Int, after: String = ""): PostConnection
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "subreddit_topic", "title", "username" FROM "post"
      ORDER BY "created_at" DESC LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  postsByTopic(first: Int, after: String = "", topic: String): PostConnection
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "subreddit_topic", "title", "username" FROM "post"
      WHERE "subreddit_topic" = $3
      ORDER BY "created_at" DESC LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "subreddit_topic", "title", "username" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )

  " Queries for type 'subreddit' "
  getSubreddit(subreddit_id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  subreddit(id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  getSubredditByTopic(topic: String!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "id", "topic" FROM "subreddit" WHERE "topic" = $1
      """
      configuration: "postgresql_config"
    )
  subredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  subredditPaginatedList(first: Int, after: Int): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'vote' "
  getVotesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT "upvote", "username" FROM "vote" WHERE "post_id" = $1
      order by "created_at" desc
      """
      schema: "public"
      configuration: "postgresql_config"
    )

  voteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  votePaginatedList(first: Int, after: Int): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  addComment(text: String, username: String, post_id: ID): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    post_id: ID
    text: String
    username: String
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "text" = COALESCE($4, "text"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'post' "
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String
    subreddit_topic: String!
    subreddit_id: ID
    title: String!
    username: String!
    image: String
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePost(
    id: ID!
    body: String
    created_at: DateTime
    image: String
    subreddit_id: ID
    subreddit_topic: String
    title: String
    username: String
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "post" SET
        "body" = COALESCE($2, "body"),
        "created_at" = COALESCE($3, "created_at"),
        "image" = COALESCE($4, "image"),
        "subreddit_id" = COALESCE($5, "subreddit_id"),
        "subreddit_topic" = COALESCE($6, "subreddit_topic"),
        "title" = COALESCE($7, "title"),
        "username" = COALESCE($8, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'subreddit' "
  deleteSubreddit(id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreddit(topic: String): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateSubreddit(id: ID!, created_at: DateTime, topic: String): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "subreddit" SET
        "created_at" = COALESCE($2, "created_at"),
        "topic" = COALESCE($3, "topic")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'vote' "
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      DELETE FROM "vote" WHERE "id" = $1 RETURNING *
      """
      configuration: "postgresql_config"
    )
  updateVote(post_id: ID!, username: String!, upvote: Boolean): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "vote" SET
        "upvote" = COALESCE($3, "upvote")
      WHERE
        "post_id" = $1 AND "username" = $2
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  addVote(username: String, post_id: ID, upvote: Boolean): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
}
